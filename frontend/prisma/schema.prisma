datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  secret        String    @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  avatar        String?
  accounts      Account[]
  sessions      Session[]
  background    String    @default("https://w.wallhaven.cc/full/28/wallhaven-288vgg.jpg")
  useBackground Boolean   @default(true)
  serverusers serveruser[]
  channelusers channeluser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Files {
  id        String @id @default(cuid())
  name      String
  channelId String
  serverId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model servers {
  id        String @id @default(cuid())
  name      String
  ownerid   String
  avatar    String  @default("https://w.wallhaven.cc/full/28/wallhaven-288vgg.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channels  channel[]
  serverusers serveruser[]
}

model serveruser {
  serverid String
  userid   String
  server   servers @relation(fields: [serverid], references: [id])
  user     User   @relation(fields: [userid], references: [id])

  @@id([serverid, userid])
}

model channel {
  id        String @id @default(cuid())
  name      String
  server    servers @relation(fields: [serverid], references: [id])
  serverid  String
  channelUsers channeluser[]
}

model channeluser {
  channelid String
  userid   String
  channel  channel @relation(fields: [channelid], references: [id])
  user     User    @relation(fields: [userid], references: [id])

  @@id([channelid, userid])
}